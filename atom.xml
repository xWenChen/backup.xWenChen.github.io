<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>个人博客，使用 Hexo+Github 搭建</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xWenChen.github.io/"/>
  <updated>2018-08-24T14:32:10.680Z</updated>
  <id>http://xWenChen.github.io/</id>
  
  <author>
    <name>WenChen Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法总览</title>
    <link href="http://xWenChen.github.io/uncategorized/%E7%AE%97%E6%B3%95%E6%80%BB%E8%A7%88/"/>
    <id>http://xWenChen.github.io/uncategorized/算法总览/</id>
    <published>2018-08-24T14:32:10.000Z</published>
    <updated>2018-08-24T14:32:10.680Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>分治法-循环赛日程表</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-%E5%BE%AA%E7%8E%AF%E8%B5%9B%E6%97%A5%E7%A8%8B%E8%A1%A8/"/>
    <id>http://xWenChen.github.io/算法/分治法-循环赛日程表/</id>
    <published>2018-08-15T08:49:03.000Z</published>
    <updated>2018-08-24T15:05:06.267Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>假设有 n = 2^k 个运动员进行循环赛，要根据以下限制生成一个日程表：<br>    1、每个选手必须与其他 n - 1 个选手各赛一次<br>    2、每个选手一天只能赛一次<br>    3、循环赛一共进行 n - 1 天<br>生成内容：n行，n - 1列的表b，b(i)(j)表示选手i在j天遇到的对手</p><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinSchedule</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] table = getTable(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; table.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; table[<span class="number">0</span>].length; j++)</span><br><span class="line">                System.out.print(table[i][j] + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] getTable(<span class="keyword">int</span> k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">1</span> &lt;&lt; k; <span class="comment">//n = 2^k</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造第一行数作为初始数据</span></span><br><span class="line">        <span class="keyword">int</span>[][] a = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            a[<span class="number">0</span>][i] = i + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将整个赛程表分为四个部分：</span></span><br><span class="line"><span class="comment">         * 左上角1：(0, i), 右上角2：(0, r + i)</span></span><br><span class="line"><span class="comment">         * 左下角3：(r, i), 右下角4：(r, r + i)</span></span><br><span class="line"><span class="comment">         * r为跨度，思想是将内容 1 复制到内容 4，将内容 2 复制到内容 3</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//r是跨度，长度每次扩大一倍，跨度最小为1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">1</span>; r &lt; n; r &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += r &lt;&lt; <span class="number">1</span>) <span class="comment">//起点每次跨越两倍长度</span></span><br><span class="line">            &#123;</span><br><span class="line">                copy(a, r, r + i, <span class="number">0</span>, i, r); <span class="comment">//左上角换到右下角</span></span><br><span class="line">                copy(a, r, i, <span class="number">0</span>, r + i, r); <span class="comment">//右上角换到左下角</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">int</span>[][] a, <span class="keyword">int</span> tox, <span class="keyword">int</span> toy,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> fromx, <span class="keyword">int</span> fromy, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; r; j++)</span><br><span class="line">                a[tox + i][toy + j] = a[fromx + i][fromy + j];</span><br><span class="line">        <span class="comment">//System.out.println();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-循环赛日程表.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治法-棋盘覆盖</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-%E6%A3%8B%E7%9B%98%E8%A6%86%E7%9B%96/"/>
    <id>http://xWenChen.github.io/算法/分治法-棋盘覆盖/</id>
    <published>2018-08-15T06:15:22.000Z</published>
    <updated>2018-08-24T15:04:11.891Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>在一个 2^k×2^k 个方格组成的棋盘中，恰有一个方格与其他方格不同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用图示的4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。<br><img src="/images/4种L型骨牌.jpg" alt="4种L型骨牌"></p><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoardCover</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] board;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String[] 和 String... 的区别：一个是固定参数，一个是参数长度可变</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"提示：棋盘大小必须为2的幂次方。"</span> +</span><br><span class="line">            <span class="string">"\n      输入的格式为：棋盘大小，特殊方格横坐标，特殊方格纵坐标"</span> +</span><br><span class="line">            <span class="string">"\n      分隔符为：英文逗号 + 空格，即 \", \"\n"</span>);</span><br><span class="line">        System.out.print(<span class="string">"请输入数据："</span>);</span><br><span class="line">        String aryStr = input.nextLine();</span><br><span class="line">        String[] temp = aryStr.split(<span class="string">", "</span>);</span><br><span class="line">        <span class="keyword">int</span>[] msg = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            msg[i] = Integer.parseInt(temp[i]);</span><br><span class="line">        board = <span class="keyword">new</span> <span class="keyword">int</span>[msg[<span class="number">0</span>]][msg[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        cover(msg[<span class="number">0</span>], msg[<span class="number">1</span>], msg[<span class="number">2</span>], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给特殊点赋值</span></span><br><span class="line">        board[msg[<span class="number">1</span>]][msg[<span class="number">2</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; msg[<span class="number">0</span>]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; msg[<span class="number">0</span>]; j++)</span><br><span class="line">                System.out.print(board[i][j] + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数含义：size为棋盘大小，x，y为特殊点坐标, sx，sy为棋盘起点坐标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cover</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> sx, <span class="keyword">int</span> sy)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> t = ++num; <span class="comment">//函数递归的层数</span></span><br><span class="line">        <span class="keyword">int</span> halfSize = size / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x &lt; sx + halfSize &amp;&amp; y &lt; sy + halfSize) <span class="comment">//特殊点在左上角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            cover(halfSize, x, y, sx, sy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//特殊点不在左上角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//填充右下角为特殊点</span></span><br><span class="line">            <span class="keyword">int</span> tx = sx + halfSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> ty = sy + halfSize - <span class="number">1</span>;</span><br><span class="line">            board[tx][ty] = t;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//填充剩余棋盘</span></span><br><span class="line">            cover(halfSize, tx, ty, sx, sy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x &gt;= sx + halfSize &amp;&amp; y &lt; sy + halfSize) <span class="comment">//特殊点在右上角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            cover(halfSize, x, y, sx + halfSize, sy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//特殊点不在右上角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//填充左下角为特殊点</span></span><br><span class="line">            <span class="keyword">int</span> tx = sx + halfSize;</span><br><span class="line">            <span class="keyword">int</span> ty = sy + halfSize - <span class="number">1</span>;</span><br><span class="line">            board[tx][ty] = t;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//填充剩余棋盘</span></span><br><span class="line">            cover(halfSize, tx, ty, sx + halfSize, sy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x &lt; sx + halfSize &amp;&amp; y &gt;= sy + halfSize) <span class="comment">//特殊点在左下角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            cover(halfSize, x, y, sx, sy + halfSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//特殊点不在左下角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//填充右上角为特殊点</span></span><br><span class="line">            <span class="keyword">int</span> tx = sx + halfSize - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> ty = sy + halfSize;</span><br><span class="line">            board[tx][ty] = t;</span><br><span class="line">            <span class="comment">//填充剩余棋盘</span></span><br><span class="line">            cover(halfSize, tx, ty, sx, sy + halfSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x &gt;= sx + halfSize &amp;&amp; y &gt;= sy + halfSize) <span class="comment">//特殊点在右下角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            cover(halfSize, x, y, sx + halfSize, sy + halfSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//特殊点不在右下角棋盘</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//填充左上角为特殊点</span></span><br><span class="line">            <span class="keyword">int</span> tx = sx + halfSize;</span><br><span class="line">            <span class="keyword">int</span> ty = sy + halfSize;</span><br><span class="line">            board[tx][ty] = t;</span><br><span class="line">            <span class="comment">//填充剩余棋盘</span></span><br><span class="line">            cover(halfSize, tx, ty, sx + halfSize, sy + halfSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-棋盘覆盖.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治法-Strassen矩阵乘法</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-Strassen%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    <id>http://xWenChen.github.io/算法/分治法-Strassen矩阵乘法/</id>
    <published>2018-08-15T03:57:29.000Z</published>
    <updated>2018-08-24T14:57:35.235Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>我们知道，两个大小为 2 * 2 的矩阵相乘，一般需要进行 8 次乘法。而Strassen矩阵乘法可以减少一次乘法，只需要 7 次，看似很少，但当数据量很大时，效率就会有显著提升。不过使用 Strassen矩阵乘法需要满足 矩阵边长为 2 的幂次方。因为该算法会用到分治，如果分治后矩阵两边边长不等，结果会出错。</p><p>使用下面的方法计算结果矩阵，假设两个长度为 2 的矩阵是 A，B，相乘后的结果矩阵为 C：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">M1</span> = A11(B12 - B22)注：Anm 表示 A 矩阵第 n 行 k 列的值，Bnm，Cnm 同理</span><br><span class="line"><span class="attr">M2</span> = (A11 + A12)B22</span><br><span class="line"><span class="attr">M3</span> = (A21 + A22)B11 </span><br><span class="line"><span class="attr">M4</span> = A22(B21 - B11)</span><br><span class="line"><span class="attr">M5</span> = (A11 + A22)(B11 + B22)</span><br><span class="line"><span class="attr">M6</span> = (A12 - A22)(B21 + B22)</span><br><span class="line"><span class="attr">M7</span> = (A11 - A21)(B11 + B12)</span><br></pre></td></tr></table></figure></p><p>可得结果为：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C<span class="number">11</span> = <span class="name">M5</span> + <span class="name">M4</span> - <span class="name">M2</span> + <span class="name">M6</span></span><br><span class="line">C<span class="number">12</span> = <span class="name">M1</span> + <span class="name">M2</span></span><br><span class="line">C<span class="number">21</span> = <span class="name">M3</span> + <span class="name">M4</span></span><br><span class="line">C<span class="number">22</span> = <span class="name">M5</span> + <span class="name">M1</span> - <span class="name">M3</span> - <span class="name">M7</span></span><br></pre></td></tr></table></figure></p><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrassenMatrixMultiply</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">            <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>,</span><br><span class="line">            <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] c = sMM(a, b, length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(c[i] + <span class="string">" "</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((i + <span class="number">1</span>) % length == <span class="number">0</span>) <span class="comment">//换行</span></span><br><span class="line">                System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sMM(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b, <span class="keyword">int</span> length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> getResult(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tlength = length / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//把a数组分为四部分，进行分治递归</span></span><br><span class="line">            <span class="keyword">int</span>[] aa = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="keyword">int</span>[] ab = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="keyword">int</span>[] ac = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="keyword">int</span>[] ad = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="comment">//把b数组分为四部分，进行分治递归</span></span><br><span class="line">            <span class="keyword">int</span>[] ba = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="keyword">int</span>[] bb = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="keyword">int</span>[] bc = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line">            <span class="keyword">int</span>[] bd = <span class="keyword">new</span> <span class="keyword">int</span>[tlength * tlength];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//划分子矩阵</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * 划分矩阵：</span></span><br><span class="line"><span class="comment">                     * 例子：将 4 * 4 的矩阵，变为 2 * 2 的矩阵，</span></span><br><span class="line"><span class="comment">                     * 那么原矩阵左上、右上、左下、右下的四个元素分别归为新矩阵</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="keyword">if</span>(i &lt; tlength)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; tlength)</span><br><span class="line">                        &#123;</span><br><span class="line">                            aa[i * tlength + j] = a[i * length + j];</span><br><span class="line">                            ba[i * tlength + j] = b[i * length + j];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            ab[i * tlength + (j - tlength)]</span><br><span class="line">                            = a[i * length + j];</span><br><span class="line">                            bb[i * tlength + (j - tlength)]</span><br><span class="line">                            = b[i * length + j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; tlength)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//i 大于 tlength 时，需要减去 tlength，j同理</span></span><br><span class="line">                            <span class="comment">//因为 b，c，d三个子矩阵有对应了父矩阵的后半部分</span></span><br><span class="line">                            ac[(i - tlength) * tlength + j]</span><br><span class="line">                            = a[i * length + j];</span><br><span class="line">                            bc[(i - tlength) * tlength + j]</span><br><span class="line">                            = b[i * length + j];</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            ad[(i - tlength) * tlength + (j - tlength)]</span><br><span class="line">                            = a[i * length + j];</span><br><span class="line">                            bd[(i - tlength) * tlength + (j - tlength)]</span><br><span class="line">                            = b[i * length + j];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分治递归</span></span><br><span class="line">            <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[length * length];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//temp：4个临时矩阵</span></span><br><span class="line">            <span class="keyword">int</span>[] t1 = add(sMM(aa, ba, tlength), sMM(ab, bc, tlength));</span><br><span class="line">            <span class="keyword">int</span>[] t2 = add(sMM(aa, bb, tlength), sMM(ab, bd, tlength));</span><br><span class="line">            <span class="keyword">int</span>[] t3 = add(sMM(ac, ba, tlength), sMM(ad, bc, tlength));</span><br><span class="line">            <span class="keyword">int</span>[] t4 = add(sMM(ac, bb, tlength), sMM(ad, bd, tlength));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//归并结果</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i &lt; tlength)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; tlength)</span><br><span class="line">                            result[i * length + j]</span><br><span class="line">                            = t1[i * tlength + j];</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            result[i * length + j]</span><br><span class="line">                            = t2[i * tlength + (j - tlength)];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(j &lt; tlength)</span><br><span class="line">                            result[i * length + j]</span><br><span class="line">                            = t3[(i - tlength) * tlength + j];</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            result[i * length + j]</span><br><span class="line">                            = t4[(i - tlength) * tlength + (j - tlength)];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getResult(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p1 = a[<span class="number">0</span>] * (b[<span class="number">1</span>] - b[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">int</span> p2 = (a[<span class="number">0</span>] + a[<span class="number">1</span>]) * b[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> p3 = (a[<span class="number">2</span>] + a[<span class="number">3</span>]) * b[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> p4 = a[<span class="number">3</span>] * (b[<span class="number">2</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> p5 = (a[<span class="number">0</span>] + a[<span class="number">3</span>]) * (b[<span class="number">0</span>] + b[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">int</span> p6 = (a[<span class="number">1</span>] - a[<span class="number">3</span>]) * (b[<span class="number">2</span>] + b[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">int</span> p7 = (a[<span class="number">0</span>] - a[<span class="number">2</span>]) * (b[<span class="number">0</span>] + b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> c00 = p5 + p4 - p2 + p6;</span><br><span class="line">        <span class="keyword">int</span> c01 = p1 + p2;</span><br><span class="line">        <span class="keyword">int</span> c10 = p3 + p4;</span><br><span class="line">        <span class="keyword">int</span> c11 = p5 + p1 -p3 - p7;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;c00, c01, c10, c11&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] add(<span class="keyword">int</span>[] a, <span class="keyword">int</span>[] b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">            c[i] = a[i] + b[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个数是不是2的幂次方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">adjust</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (num &amp; (num - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-Strassen矩阵乘法.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治法-线性时间选择</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-%E7%BA%BF%E6%80%A7%E6%97%B6%E9%97%B4%E9%80%89%E6%8B%A9/"/>
    <id>http://xWenChen.github.io/算法/分治法-线性时间选择/</id>
    <published>2018-08-14T02:35:55.000Z</published>
    <updated>2018-08-24T15:04:38.419Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>给定线性序集中 n 个元素和一个整数 k, 1 &lt;= k &lt;= n, 要求找出这 n 个元素中第 k 小的元素。即如果将这 n 个元素依其线性序排列时，排在第 k 个位置的元素即为要找的元素。</p><p>本篇博文代码会用到 <a href="/算法/分治法-快速排序">分治法-快速排序</a> 博文中用到的基准选择方法。<br>方法使用位置：代码第 25 行<br>方法实现位置：代码第 37 - 68 行</p><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomizedSelect</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> t = select(a, <span class="number">0</span>, a.length - <span class="number">1</span>, <span class="number">4</span>); <span class="comment">//选出第四大的数</span></span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数含义：a为待查询的数组，low为起点，high为终点，target为带查询的目标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low == high)</span><br><span class="line">            <span class="keyword">return</span> a[low];</span><br><span class="line">        <span class="comment">//将数组以i为基准分为两部分，左边的都小于i，右边的都大于i</span></span><br><span class="line">        <span class="comment">//此处会用到快速排序算法中的划分方法来找基准</span></span><br><span class="line">        <span class="keyword">int</span> i = randPart(a, low, high);</span><br><span class="line">        <span class="keyword">int</span> length = i - low + <span class="number">1</span>; <span class="comment">//数组左半部分的长度</span></span><br><span class="line">        <span class="comment">//如果第target小的数小于等于左半部分的长度，则这个数在此部分内</span></span><br><span class="line">        <span class="keyword">if</span>(target &lt;= length)</span><br><span class="line">            <span class="keyword">return</span> select(a, low, i, target);</span><br><span class="line">        <span class="comment">//如果第target小的数大于左半部分的长度，则这个数在右半部分内，</span></span><br><span class="line">        <span class="comment">//且左半部分的数都小于第target小的数</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> select(a, i + <span class="number">1</span>, high, target - length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//划分寻找基准-随机化优化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randPart</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//随机产生一个 low 到 high 的整数</span></span><br><span class="line">        <span class="keyword">int</span> flag = low + r.nextInt(high - low + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivot = a[flag];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实际还是相当于以a[0]为基准</span></span><br><span class="line">        a[flag] = a[low];</span><br><span class="line">        a[low] = pivot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1、从右往左找比基准小的数</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; a[high] &gt; pivot)</span><br><span class="line">                high--;</span><br><span class="line">            <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">                a[low] = a[high];</span><br><span class="line">            <span class="comment">//2、从左往右找比基准大的数</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; a[low] &lt;= pivot)</span><br><span class="line">                low++;</span><br><span class="line">            <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">                a[high] = a[low];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将pivot放到low和high相遇的地方</span></span><br><span class="line">        a[high] = pivot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-线性时间选择.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治法-归并排序</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://xWenChen.github.io/算法/分治法-归并排序/</id>
    <published>2018-08-14T01:18:07.000Z</published>
    <updated>2018-08-24T15:01:09.099Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本篇博文代码是递归方式归并排序算法的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ary = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"排序前的数组："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</span><br><span class="line">            System.out.print(ary[i] + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        sort(ary);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"排序后的数组："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</span><br><span class="line">            System.out.print(ary[i] + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//low == high 说明两者相遇，即数组大小为1</span></span><br><span class="line">        <span class="keyword">if</span>(low &lt; high) <span class="comment">//当数组尺寸不为1的时候进行递归排序操作</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">            sort(a, low, mid); <span class="comment">//对左半部分排序</span></span><br><span class="line">            sort(a, mid + <span class="number">1</span>, high); <span class="comment">//对右半部分排序</span></span><br><span class="line">            <span class="comment">//对左右两半部分排序后，两者都有序，</span></span><br><span class="line">            <span class="comment">//但左半部分的值不一定小于右半部分，所以需要归并整理</span></span><br><span class="line">            merge(a, low, mid, high); <span class="comment">//归并</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span>[] r = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>]; <span class="comment">//下表从零开始，数组大小多1</span></span><br><span class="line">        <span class="comment">//i为待返回结果数组起点，j为左半部分数组起点，k为右半部分数组起点</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = low, k = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(j &lt;= mid &amp;&amp; k &lt;= high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[k])</span><br><span class="line">                r[i++] = a[j++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                r[i++] = a[k++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若有左半部分一个元素未加入 result 数组，此处可解决这个问题</span></span><br><span class="line">        <span class="keyword">while</span>(j &lt;= mid)</span><br><span class="line">            r[i++] = a[j++];</span><br><span class="line">        <span class="comment">//若有由半部分一个元素未加入 result 数组，此处可解决这个问题</span></span><br><span class="line">        <span class="keyword">while</span>(k &lt;= high)</span><br><span class="line">            r[i++] = a[k++];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将result数组拷入原数组对应位置</span></span><br><span class="line">        System.arraycopy(r, <span class="number">0</span>, a, low, r.length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-归并排序.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="排序" scheme="http://xWenChen.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>分治法-排列问题</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>http://xWenChen.github.io/算法/分治法-排列问题/</id>
    <published>2018-08-13T08:25:34.000Z</published>
    <updated>2018-08-24T15:03:11.875Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>显示列表list(a, b, c, d……) 的全排列，显示的条目数为：n!<br>例如(1, 2, 3)的全排列为(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)</p><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的例子将以 A B C 为例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayProblem</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] list = <span class="keyword">new</span> <span class="keyword">char</span>[] &#123;<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"序列(A, B, C)的全排列为：\n"</span>);</span><br><span class="line">        array(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全排列的产生函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">(<span class="keyword">char</span>[] list)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        array(list, <span class="number">0</span>, list.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生 start 到 end 的全排列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">array</span><span class="params">(<span class="keyword">char</span>[] list, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end; i++)</span><br><span class="line">                System.out.print(list[i] + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; end; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//交换 list[i] 和 list[k] 的位置(例：i = 1 时，start = 0，</span></span><br><span class="line">                <span class="comment">//交换 A B 的位置，此时为 B A C)</span></span><br><span class="line">                <span class="keyword">char</span> temp = list[i];</span><br><span class="line">                list[i] = list[start];</span><br><span class="line">                list[start] = temp;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//第一个交换位置后，产生剩下的全排列序列(第一个为 B，</span></span><br><span class="line">                <span class="comment">//产生 A C 的全排列)</span></span><br><span class="line">                array(list, start + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//将一个有序序列全排列后，恢复原状，防止出现重复的结果</span></span><br><span class="line">                <span class="comment">//(会出现两个完全相同的序列，即一次排列输出两次, </span></span><br><span class="line">                <span class="comment">//可以注释掉下面三行代码，运行观察效果，然后分析原因)</span></span><br><span class="line">                temp = list[i];</span><br><span class="line">                list[i] = list[start];</span><br><span class="line">                list[start] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-全排列问题.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>分治法-快速排序</title>
    <link href="http://xWenChen.github.io/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://xWenChen.github.io/算法/分治法-快速排序/</id>
    <published>2018-08-13T05:24:51.000Z</published>
    <updated>2018-08-24T15:01:21.771Z</updated>
    
    <content type="html"><![CDATA[<p><strong>算法思想：分治法</strong><br><strong>实际问题：Strassen 矩阵乘法</strong><br><strong>编写语言：Java</strong></p><hr><a id="more"></a><h6 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本篇博文代码主要有两种基准选择方式：基准=低下标处的值，基准=随机值</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ary = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"排序前的数组："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</span><br><span class="line">            System.out.print(ary[i] + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        sort(ary);</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">"排序后的数组："</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</span><br><span class="line">            System.out.print(ary[i] + <span class="string">" "</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//当low == high时就返回</span></span><br><span class="line">        <span class="comment">//确保数组元素为1时就停止划分，防止数组下标越界</span></span><br><span class="line">        <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pivot = randPart(a, low, high);</span><br><span class="line">            sort(a, low, pivot - <span class="number">1</span>);</span><br><span class="line">            sort(a, pivot + <span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//划分寻找基准</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">part</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = a[low];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1、从右往左找比基准小的数</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; a[high] &gt; pivot)</span><br><span class="line">                high--;</span><br><span class="line">            <span class="comment">//a处赋值</span></span><br><span class="line">            <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">                a[low] = a[high]; <span class="comment">//此时是 a[high] &lt; pivot, a[low] &lt; pivot</span></span><br><span class="line">            <span class="comment">//2、从左往右找比基准大的数</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; a[low] &lt;= pivot)</span><br><span class="line">                low++;</span><br><span class="line">            <span class="comment">//3、一次寻找结束，交换两个值</span></span><br><span class="line">            <span class="comment">//b处赋值</span></span><br><span class="line">            <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">                a[high] = a[low]; <span class="comment">//此时是 a[high] &gt; pivot, a[low] &lt; pivot</span></span><br><span class="line">            <span class="comment">//a、b两处赋值，相当于一次交换，只是分开了</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将pivot放到left和right相遇的地方</span></span><br><span class="line">        a[high] = pivot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//划分寻找基准-随机化优化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randPart</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="comment">//随机产生一个 low 到 high 的整数</span></span><br><span class="line">        <span class="keyword">int</span> flag = low + r.nextInt(high - low + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pivot = a[flag];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处交换保证 1 处的赋值不出错，</span></span><br><span class="line">        <span class="comment">//因为只要原 a[low] &lt; pivot，那么这个交换算法就失败了</span></span><br><span class="line">        a[flag] = a[low];</span><br><span class="line">        a[low] = pivot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//1、从右往左找比基准小的数</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; a[high] &gt; pivot)</span><br><span class="line">                high--;</span><br><span class="line">            <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">                a[low] = a[high];</span><br><span class="line">            <span class="comment">//2、从左往右找比基准大的数</span></span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; a[low] &lt;= pivot)</span><br><span class="line">                low++;</span><br><span class="line">            <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">                a[high] = a[low];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将pivot放到low和high相遇的地方</span></span><br><span class="line">        a[high] = pivot;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h6><p><img src="/images/分治法-快速排序.jpg" alt="结果示例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;算法思想：分治法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;实际问题：Strassen 矩阵乘法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;编写语言：Java&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="http://xWenChen.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="分治法" scheme="http://xWenChen.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
      <category term="排序" scheme="http://xWenChen.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
